#GUI SHELL
from PyQt5.uic import loadUiType
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QWidget


from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import (FigureCanvasQTAgg as FigureCanvas, NavigationToolbar2QT as NavigationToolbar)

Ui_MainWindow, QMainWindow = loadUiType('window.ui')


class Main(QMainWindow, Ui_MainWindow):
    def __init__(self, ):
        super(Main, self).__init__()
        self.setupUi(self)
        self.fig_dict = {}

        self.mplfigs.itemClicked.connect(self.changefig)

        fig = Figure()
        self.addmpl(fig)

    def changefig(self, item):
        text = item.text()
        self.rmmpl()
        self.addmpl(self.fig_dict[text])

    def addfig(self, name, fig):
      self.fig_dict[name] = fig
      self.mplfigs.addItem(name)


    def addmpl(self, fig):
      self.canvas = FigureCanvas(fig)
      self.mplvl.addWidget(self.canvas)
      self.canvas.draw()
      self.toolbar = NavigationToolbar(self.canvas,
              self.mplwindow, coordinates=True)
      self.mplvl.addWidget(self.toolbar)

    def rmmpl(self,):
      self.mplvl.removeWidget(self.canvas)
      self.canvas.close()
      self.mplvl.removeWidget(self.toolbar)
      self.toolbar.close()

# Each of our main figures can be added to the GUI - named "Fig". Several examples included from the tutorial I used. Having trouble with the bar chart though.
if __name__ == '__main__':
  import sys
  from PyQt5 import QtGui
  import numpy as np

  fig1 = Figure()
  detectorscount = COdf[(COdf['MONOXIDE'] >= 0)]
  detectorscount = detectorscount.groupby('MONOXIDE').MONOXIDE.count()
  ax1f1 = fig1.add_subplot(111)
  ax1f1.bar(1, detectorscount[1])
  ax1f1.bar(2, detectorscount[2])
  ax1f1.set_xlabel('Owns a CO Monitor')
  ax1f1.set_ylabel('Count')
  ax1f1.set_xticks([1,2])
  ax1f1.set_xticklabels(['Yes','No'])
  fig1.suptitle('Households with CO Monitors')

  fig2 = Figure()
  ax1f2 = fig2.add_subplot(111)
  hoa = COdf[(COdf['HOA'] >= 0)]
  hoa = hoa.groupby('HOA').HOA.count()
  hoa = np.array(hoa)
  for i in range(len(hoa)):
      ax1f2.bar(i, hoa[i])
  ax1f2.set_xlabel('Is in a Homeowners Association')
  ax1f2.set_ylabel('Count')
  ax1f2.set_xticks([0,1])
  ax1f2.set_xticklabels(['Yes','No'])
  fig2.suptitle('HH: Homeowners Assc.')

  fig3 = Figure()
  ax1f3 = fig3.add_subplot(111)
  yrb = COdf[(COdf['YRBUILT'] >= 0)]
  yrb = yrb.groupby('YRBUILT').YRBUILT.count()
  yrb_lab = np.array(yrb.index)
  yrb = np.array(yrb)
  for i in range(len(yrb)):
      ax1f3.bar(i, yrb[i])
  ax1f3.set_xticks([0,1,2,3,4,5,6,7,8,9,10,11])
  ax1f3.set_xticklabels(yrb_lab)
  ax1f3.set_xlabel('Year Home Built')
  ax1f3.set_ylabel('Count')
  fig3.suptitle('HH: Year Built.')

  fig4 = Figure()
  ax1f4 = fig4.add_subplot(111)
  ax1f4.set_xlabel('Monthly Rent Amount')
  ax1f4.set_ylabel('USD')
  rent = COdf[(COdf['RENT']) >=0]
  rent = rent.groupby('RENT').RENT.count()
  fig4.suptitle('HH: Rent')
  ax1f4.hist(rent)

  fig5 = Figure()
  ax1f5 = fig5.add_subplot(111)
  ax1f5.set_ylabel('Count')
  ax1f4.set_xlabel('Under Rent Control')
  rentctrl = COdf[(COdf['RENTCNTRL']) >=0]
  rentctrl = rentctrl.groupby('RENTCNTRL').RENTCNTRL.count()
  rentctrl = np.array(rentctrl)
  for i in range(len(rentctrl)):
      ax1f5.bar(i, rentctrl[i])
  ax1f5.set_xticks([0, 1])
  ax1f5.set_xticklabels(['Yes','No'])
  fig5.suptitle('HH: Rent Control')

  fig6 = Figure()
  ax1f6 = fig6.add_subplot(111)
  ax1f6.set_ylabel('Count')
  ax1f6.set_xlabel('Marital Status')
  hhmar = COdf[(COdf['HHMAR']) >=0]
  hhmar = hhmar.groupby('HHMAR').HHMAR.count()
  hhmar = np.array(hhmar)
  for i in range(len(hhmar)):
      ax1f6.bar(i, hhmar[i])
  ax1f6.set_xticks([0,1,2,3,4,5])
  ax1f6.set_xticklabels(['Married.p', 'Married.a','Widowed','Divorced','Separated','NM'])
  fig6.suptitle('HH: Marital Status')

  fig7 = Figure()
  ax1f7 = fig7.add_subplot(111)
  grad = COdf[(COdf['HHGRAD']) >=0]
  grad = grad.groupby('HHGRAD').HHGRAD.count()
  grad = np.array(grad)
  for i in range(len(grad)):
      ax1f7.bar(i, grad[i])
  ax1f7.set_xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])
  ax1f7.set_xticklabels(['<1st Gr.', '1-4 Gr.', '5-6 Gr.', '7-8 Gr.', '9 Gr.', '10th Gr.', '11 Gr.', '12 Gr.', 'HS/GED', 'Some College', 'Technical', 'Assoc./Voc.', 'Assc.', 'Bachelors', 'Masters','MD/JD/etc.', 'Doctorate'])
  fig7.suptitle('HH: Education Lvl')

  fig8 = Figure()
  ax1f8 = fig8.add_subplot(111)
  race = COdf[(COdf['HHRACE']) >= 0]
  race = race.groupby('HHRACE').HHRACE.count()
  race = np.array(race)
  r_other = np.array(sum(race[4:]))
  race = np.append(race[0:3], r_other) # NOTE: I COLLAPSED ALL RACES (low n) so this is WHITE, BLACK, NAT. AMER., AND ASIAN, + OTHERS.
  for i in range(len(race)):
      ax1f8.bar(i, race[i])
  fig8.suptitle('HH: Race')

  fig9 = Figure()
  ax1f9 = fig9.add_subplot(111)
  lang = COdf[(COdf['INTLANG']) >=0]
  lang = lang.groupby('INTLANG').INTLANG.count()
  lang = np.array(lang)
  for i in range(len(lang)):
      ax1f9.bar(i, lang[i])
  fig9.suptitle('HH: Language')

  fig10 = Figure()
  ax1f10 = fig10.add_subplot(111)
  heat = COdf[(COdf['HEATTYPE']) >=0]
  heat = heat.groupby('HEATTYPE').HEATTYPE.count()
  heat = np.array(heat)
  for i in range(len(heat)):
      ax1f10.bar(i, heat[i])
  fig10.suptitle('CO: Heat Type')

  fig11 = Figure()
  ax1f11 = fig11.add_subplot(111)
  heatfuel = COdf[(COdf['HEATFUEL']) >=0]
  heatfuel = heatfuel.groupby('HEATFUEL').HEATFUEL.count()
  heatfuel = np.array(heatfuel)
  for i in range(len(heatfuel)):
      ax1f11.bar(i, heatfuel[i])
  fig11.suptitle('CO: Heat Fuel')

  fig12 = Figure()
  ax1f12 = fig12.add_subplot(111)
  hotwater = COdf[(COdf['HOTWATER']) >=0]
  hotwater = hotwater.groupby('HOTWATER').HOTWATER.count()
  hotwater = np.array(hotwater)
  for i in range(len(hotwater)):
      ax1f12.bar(i, hotwater[i])
  fig12.suptitle('CO: Water Heater Type')

  fig13 = Figure()
  ax1f13 = fig13.add_subplot(111)
  acp = COdf[(COdf['ACPRIMARY']) >=0]
  acp = acp.groupby('ACPRIMARY').ACPRIMARY.count()
  acp = np.array(acp)
  for i in range(len(acp)):
      ax1f13.bar(i, acp[i])
  fig13.suptitle('CO: Primary Air Conditioning')

  fig14 = Figure()
  ax1f14 = fig14.add_subplot(111)
  acs = COdf[(COdf['ACSECNDRY']) >=0]
  acs = acs.groupby('ACSECNDRY').ACSECNDRY.count()
  acs = np.array(acs)
  for i in range(len(acs)):
      ax1f14.bar(i, acs[i])
  fig14.suptitle('CO: Secondary Air Conditioning')

  fig15 = Figure()
  ax1f15 = fig15.add_subplot(111)
  income = COdf[(COdf['HINCP']) >=0]
  income = income[['HINCP']]
  ax1f15.boxplot(income.values)
  fig15.suptitle('HH: Household Income (past 12 months)')

  app = QApplication(sys.argv)
  main = Main()
  main.addfig('Target: CO Monitor', fig1)
  main.addfig('HH: Homeowners Assc.', fig2)
  main.addfig('HH: Year Built', fig3)
  main.addfig('HH: Household Income', fig15)
  main.addfig('HH: Rent', fig4)
  main.addfig('HH: Rent Control', fig5)
  main.addfig('HH: Marital Status', fig6)
  main.addfig('HH: Education Lvl', fig7)
  main.addfig('HH: Race', fig8)
  main.addfig('HH: Language', fig9)
  main.addfig('CO: Heat Type', fig10)
  main.addfig('CO: Heat Fuel', fig11)
  main.addfig('CO: Water Heater', fig12)
  main.addfig('CO: AC Primary', fig13)
  main.addfig('CO: AC Secondary', fig14)
  main.show()
  sys.exit(app.exec_())
